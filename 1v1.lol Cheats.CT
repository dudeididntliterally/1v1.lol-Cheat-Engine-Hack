<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>272</ID>
      <Description>"READ ME FIRST!, DONT TOGGLE!, DOUBLE CLICK &lt;script&gt; ---&gt;"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//Instructions 1. Toggle Infinite Ammo Before Toggling Rapid Fire
//Instructions 2. The Gravity floats will always be working I am pretty sure
//Instructions 3. If the Infinite Ammo breaks or doesn't work reload the page
//(sorry)
//IMPORTANT! READ! Float in the air scripts will most likely bug out the game
//until you turn them off because they use your camera value as well
//(sorry again)
//Extra. This was extremely easy to make lol
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>271</ID>
      <Description>"Infinite Ammo Script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Ammo,89 54 03 5C 8B 7C 03 28)
alloc(newmem,$1000,Ammo)

label(code)
label(return)

newmem:
add [rbx+rax+5C],(int)10101

code:
  mov [rbx+rax+5C],(int)10101
  mov edi,[rbx+rax+28]
  jmp return

Ammo:
  jmp newmem
  nop 3
return:
registersymbol(Ammo)

[DISABLE]

Ammo:
  db 89 54 03 5C 8B 7C 03 28

unregistersymbol(Ammo)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>138</ID>
      <Description>"Auto Move With Camera Position"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(AutoMove,C4 C1 7A 11 44 3B 3C 46)
alloc(newmem,$1000,AutoMove)

label(code)
label(return)

newmem:

code:
  mov [r11+rdi+3C],(float)5
  jmp return

AutoMove:
  jmp newmem
  nop 2
return:
registersymbol(AutoMove)

[DISABLE]

AutoMove:
  db C4 C1 7A 11 44 3B 3C

unregistersymbol(AutoMove)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"Rapid Fire"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(RapidFire,C4 C1 7A 11 44 19 20 E9)
alloc(newmem,$1000,RapidFire)

label(code)
label(return)

newmem:
mov [r9+rbx+20],(int)0

code:
  mov [r9+rbx+20],(int)0
  jmp return

RapidFire:
  jmp newmem
  nop 2
return:
registersymbol(RapidFire)

[DISABLE]

RapidFire:
  db C4 C1 7A 11 44 19 20

unregistersymbol(RapidFire)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>267</ID>
      <Description>"Float In The Air (Gravity Version)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Gravity,42 89 9C 07 E4 00 00 00)
alloc(newmem,$1000,Gravity)

label(code)
label(return)

newmem:
mov [rdi+r8+000000E4],(float)15

code:
  mov [rdi+r8+000000E4],(float)15
  jmp return

Gravity:
  jmp newmem
  nop 3
return:
registersymbol(Gravity)

[DISABLE]

Gravity:
  db 42 89 9C 07 E4 00 00 00

unregistersymbol(Gravity)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>268</ID>
      <Description>"Float In The Air (Modified Version, Can Go Through Builds)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(JumpingStuff,41 89 7C 1B 04 45 89 44 1B 08 8B 7C)
alloc(newmem,$1000,JumpingStuff)

label(code)
label(return)

newmem:
mov [r11+rbx+04],(float)10

code:
  mov [r11+rbx+04],(float)10
  jmp return

JumpingStuff:
  jmp newmem
return:
registersymbol(JumpingStuff)

[DISABLE]

JumpingStuff:
  db 41 89 7C 1B 04

unregistersymbol(JumpingStuff)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of add rbx,r14</Description>
      <AddressString>7B0D3656D20</AddressString>
      <Before>
        <Byte>27</Byte>
        <Byte>48</Byte>
        <Byte>C1</Byte>
        <Byte>EB</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>49</Byte>
        <Byte>03</Byte>
        <Byte>DE</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C8</Byte>
        <Byte>8B</Byte>
        <Byte>7C</Byte>
        <Byte>0B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of vmovss [rcx+rax+20],xmm0</Description>
      <AddressString>5EB386CBBE80</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>18</Byte>
        <Byte>49</Byte>
        <Byte>03</Byte>
        <Byte>CE</Byte>
      </Before>
      <Actual>
        <Byte>C5</Byte>
        <Byte>FA</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>01</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>D8</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of vmovss [r9+rbx+20],xmm3</Description>
      <AddressString>5EB386E9452F</AddressString>
      <Before>
        <Byte>87</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C4</Byte>
        <Byte>C1</Byte>
        <Byte>7A</Byte>
        <Byte>11</Byte>
        <Byte>5C</Byte>
        <Byte>19</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>33</Byte>
        <Byte>DB</Byte>
        <Byte>E9</Byte>
        <Byte>E7</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of vmovss [r9+rbx+20],xmm0</Description>
      <AddressString>5EB386E94505</AddressString>
      <Before>
        <Byte>7A</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>03</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>C4</Byte>
        <Byte>C1</Byte>
        <Byte>7A</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>19</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+rax+5C],edx</Description>
      <AddressString>7CF30484B4F2</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>3B</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>54</Byte>
        <Byte>03</Byte>
        <Byte>5C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>7C</Byte>
        <Byte>03</Byte>
        <Byte>28</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
